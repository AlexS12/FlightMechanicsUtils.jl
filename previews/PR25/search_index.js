var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Constants","page":"API","title":"Constants","text":"","category":"section"},{"location":"api/#Air","page":"API","title":"Air","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"γ_AIR\nR_AIR","category":"page"},{"location":"api/#FlightMechanicsUtils.γ_AIR","page":"API","title":"FlightMechanicsUtils.γ_AIR","text":"γ_AIR = 1.4\n\nAdiabatic index or ratio of specific heats (dry air at 20º C).\n\n\n\n\n\n","category":"constant"},{"location":"api/#FlightMechanicsUtils.R_AIR","page":"API","title":"FlightMechanicsUtils.R_AIR","text":"R_AIR = 287.05287  (J/(Kg·K))\n\nSpecific gas constant for dry air.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Earth","page":"API","title":"Earth","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"gD","category":"page"},{"location":"api/#FlightMechanicsUtils.gD","page":"API","title":"FlightMechanicsUtils.gD","text":"gD = 9.80665  (m/s²)\n\nDown component of gravity acceleration at Earth surface at 45º geodetic latitude.\n\nStevens, B. L., Lewis, F. L., & Johnson, E. N. (2015). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. Equation (page 33)\n\n\n\n\n\n","category":"constant"},{"location":"api/#Ellipsoid","page":"API","title":"Ellipsoid","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Available ellipsoid models:","category":"page"},{"location":"api/","page":"API","title":"API","text":"Name a (m) f^-1\nClarke1866 6378206.4 294.9786982\nClarke1880 6378249.145 294.465\nInternational 6378388.0 297.0\nBessel 6377397.155 299.1528128\nEverest 6377276.345 300.8017\nModifiedEverest 6377304.063 300.8017\nAustralianNational 6378160.0 298.25\nSouthAmerican1969 6378160.0 298.25\nAiry 6377564.396 299.3249646\nModifiedAiry 6377340.189 299.3249646\nHough 6378270.0 297.0\nFischer1960SouthAsia 6378155.0 298.3\nFischer1960Mercury 6378166.0 298.3\nFischer1968 6378150.0 298.3\nWGS60 6378165.0 298.3\nWGS66 6378145.0 298.25\nWGS72 6378135.0 298.26\nWGS84 6378137.0 298.257223563","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [FlightMechanicsUtils]\nPages   = [\"ellipsoid.jl\"]\nPrivate = false","category":"page"},{"location":"api/#FlightMechanicsUtils.Ellipsoid","page":"API","title":"FlightMechanicsUtils.Ellipsoid","text":"Ellipsoid(a, b, f, finv, e2, ϵ2, name)\nEllipsoid(a, finv, name)\n\nEarth ellipsoid model.\n\nFields\n\na::Real: semi-major axis (m).\nb::Real: semi-minor axis (m).\nf::Real: flattening (f).\nfinv::Real: inverse of flattening (f^-1).\ne2::Real: eccentricity squared.\nϵ2::Real: second eccentricity squared.\nname::String: ellipsoid name.\n\nNotes\n\na is the semi-major axis, b is the semi-minor axis. Ellipsoids are normally defined by a and f^-1. The rest of parameters are derived.\n\nFlattening:\n\nf = 1 - fracba\n\nEccentricity (first eccentricity):\n\ne^2 = fraca^2 - b^2a^2 = f (2 - f)\n\nSecond eccentricity:\n\nϵ^2 = fraca^2 - b^2b^2 = fracf (2 - f)(1 - f)^2\n\nReferences\n\nStevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. Section 1.6 (page 23)\nRogers, R. M. (2007). Applied mathematics in integrated navigation systems. American Institute of Aeronautics and Astronautics. Chapter 4 (Nomenclature differs from 1).\nBowring, B. R. (1976). Transformation from spatial to geographical coordinates. Survey review, 23(181), 323-327.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlightMechanicsUtils.ecef2llh-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.ecef2llh","text":"ecef2llh(xecef, yecef, zecef; ellipsoid=WGS84)\n\nTransform ECEF coordinates to geodetic latitude, longitude (rad) and ellipsoidal height (m) for the given ellipsoid (default ellipsoid is WGS84).\n\nNotes\n\nThe transformation is direct without iterations as [1] introduced the need to iterate for near Earth positions.\n[2] is an update of increased accuracy of [1]. The former is used in this implementation although the latter implementation is commented in the code.\nModel becomes unstable if latitude is close to 90º. An alternative equation can be found in [2] equation (16) but has not been implemented.\n\nReferences\n\nBowring, B. R. (1976). Transformation from spatial to geographical coordinates. Survey review, 23(181), 323-327.\nBowring, B. R. (1985). The accuracy of geodetic latitude and height equations. Survey Review, 28(218), 202-206.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.llh2ecef-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.llh2ecef","text":"llh2ecef(lat, lon, height; ellipsoid=WGS84)\n\nTransform geodetic latitude, longitude (rad) and ellipsoidal height (m) to ECEF for the given ellipsoid (default ellipsoid is WGS84).\n\nReferences\n\nRogers, R. M. (2007). Applied mathematics in integrated navigation systems. American Institute of Aeronautics and Astronautics. (Page 75, equations 4.20, 4.21, 4.22)\n\n\n\n\n\n","category":"method"},{"location":"api/#Rotations","page":"API","title":"Rotations","text":"","category":"section"},{"location":"api/#Coordinate-systems","page":"API","title":"Coordinate systems","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Earth\nLocal horizon\nBody\nWind","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [FlightMechanicsUtils]\nPages   = [\"rotations.jl\"]\nPrivate = false","category":"page"},{"location":"api/#FlightMechanicsUtils.body2horizon-NTuple{6,Any}","page":"API","title":"FlightMechanicsUtils.body2horizon","text":"body2horizon(x, y, z, ψ, θ, ϕ)\n\nTransform the vector coordintes (x, y, z) given in body axis to local horizon given the Euler angles (ψ, θ, ϕ) (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.body2horizon-NTuple{7,Any}","page":"API","title":"FlightMechanicsUtils.body2horizon","text":"body2horizon(x, y, z, q0, q1, q2, q3)\n\nTransform the vector coordintes (x, y, z) given in body axis to local horizon given the quaternions q_0 q_1 q_2 q_3.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.body2wind-NTuple{5,Any}","page":"API","title":"FlightMechanicsUtils.body2wind","text":"body2wind(x, y, z, α, β)\n\nTransform the vector coordintes (x, y, z) given in body axis to wind given the angle of attack (α) and the angle of sideslip (β) (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.ecef2horizon-NTuple{5,Any}","page":"API","title":"FlightMechanicsUtils.ecef2horizon","text":"ecef2horizon(x, y, z, lat, lon)\n\nTransform the vector coordintes (x, y, z) given in ECEF (Earth Fixed Earth Centered) coordinates to local horizon coordinates using geodetic latitude and longitude (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.euler_angles-NTuple{4,Any}","page":"API","title":"FlightMechanicsUtils.euler_angles","text":"euler_angles(q0, q1, q2, q3)\n\nCalculate Euler angles (ψ, θ, ϕ) (rad) given the quaternions q_0 q_1 q_2 q_3.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.horizon2body-NTuple{6,Any}","page":"API","title":"FlightMechanicsUtils.horizon2body","text":"horizon2body(x, y, z, ψ, θ, ϕ)\n\nTransform the vector coordintes (x, y, z) given in local horizon axis to body given the Euler angles (ψ, θ, ϕ) (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.horizon2body-NTuple{7,Any}","page":"API","title":"FlightMechanicsUtils.horizon2body","text":"horizon2body(x, y, z, q0, q1, q2, q3)\n\nTransform the vector coordintes (x, y, z) given in local horizon axis to body given the quaternions q_0 q_1 q_2 q_3.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.horizon2ecef-NTuple{5,Any}","page":"API","title":"FlightMechanicsUtils.horizon2ecef","text":"horizon2ecef(x, y, z, lat, lon)\n\nTransform the vector coordintes (x, y, z) given in local horizon axis to ECEF (Earth Fixed Earth Centered) using geodetic latitude and longitude (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.horizon2wind-NTuple{6,Any}","page":"API","title":"FlightMechanicsUtils.horizon2wind","text":"horizon2wind(x, y, z, χ, γ, μ)\n\nTransform the vector coordintes (x, y, z) given in local horizon axis to wind given the velocity angles (χ, γ, μ) (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.quaternions-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.quaternions","text":"quaternions(ψ, θ, ϕ)\n\nCalculate quaternion representation given the Euler angles (ψ, θ, ϕ) (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.rotation_matrix_zyx-NTuple{4,Any}","page":"API","title":"FlightMechanicsUtils.rotation_matrix_zyx","text":"rotation_matrix_zyx(q0, q1, q2, q3)\n\nCalculate the rotation matrix R_ab that transforms a vector in b frame to a frame (v_a = R_ab v_b) given the quaternions q_0 q_1 q_2 q_3.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.rotation_matrix_zyx-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.rotation_matrix_zyx","text":"rotation_matrix_zyx(α1, α2, α3)\n\nCalculate the rotation matrix R_ab that transforms a vector in b frame to a frame (v_a = R_ab v_b) given the rotations (α1, α2, α3) (rad).\n\nFrame b is obtained from frame a performing three intrinsic rotations of magnitude α1, α2 and α3 in ZYX order.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.wind2body-NTuple{5,Any}","page":"API","title":"FlightMechanicsUtils.wind2body","text":"wind2body(x, y, z, α, β)\n\nTransform the vector coordintes (x, y, z) given in wind axis to body given the angle of attack (α) and the angle of sideslip (β) (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.wind2horizon-NTuple{6,Any}","page":"API","title":"FlightMechanicsUtils.wind2horizon","text":"wind2horizon(x, y, z, χ, γ, μ)\n\nTransform the vector coordintes (x, y, z) given in wind axis to local horizon given the velocity angles (χ, γ, μ) (rad).\n\n\n\n\n\n","category":"method"},{"location":"api/#Atmosphere","page":"API","title":"Atmosphere","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [FlightMechanicsUtils]\nPages   = [\"atmosphere.jl\"]\nPrivate = false","category":"page"},{"location":"api/#FlightMechanicsUtils.atmosphere_isa-Tuple{Any}","page":"API","title":"FlightMechanicsUtils.atmosphere_isa","text":"atmosphere_isa(height)\n\nCalculate temperature, pressure, density and sound velocity for the given geopotential height according to International Standard Atmosphere 1976.\n\nReferences\n\n1.U.S. Standard Atmosphere, 1976, U.S. Government Printing Office, Washington, D.C., 1976\n\nLayer h (m) p (Pa) T (K) α (K/m)\n0 0 101325 288.15 -0.0065\n1 11000 22632.1 216.65 0\n2 20000 5474.89 216.65 0.001\n3 32000 868.019 228.65 0.0028\n4 47000 110.906 270.65 0\n5 51000 66.9389 270.65 -0.0028\n6 71000 3.95642 214.65 -0.002\n\nSource: https://en.wikipedia.org/wiki/U.S.StandardAtmosphere\n\n\n\n\n\n","category":"method"},{"location":"api/#Kinematics","page":"API","title":"Kinematics","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [FlightMechanicsUtils]\nPages   = [\"kinematics.jl\"]\nPrivate = false","category":"page"},{"location":"api/#FlightMechanicsUtils.pqr_2_quat_dot-NTuple{7,Any}","page":"API","title":"FlightMechanicsUtils.pqr_2_quat_dot","text":"pqr_2_quat_dot(p, q, r, q0, q1, q2, q3)\n\nTransform body angular velocity (p, q, r) [rad/s] to quaternion rates [1/s].\n\nSee also\n\npqr_2_ψθϕ_dot\n\nReferences\n\nStevens, B. L., Lewis, F. L., & Johnson, E. N. (2015). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. Equation (1.8-15) (page 51).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.pqr_2_ψθϕ_dot-NTuple{5,Any}","page":"API","title":"FlightMechanicsUtils.pqr_2_ψθϕ_dot","text":"pqr_2_ψθϕ_dot(p, q, r, ψ, θ, ϕ)\n\nTransform body angular velocity (p, q, r) [rad/s] to Euler angles rates (ψdot, θdot, ϕ_dot) [rad/s] given the euler angles (θ, ϕ) [rad] using kinematic angular equations.\n\nSee also\n\nψθϕ_dot_2_pqr, pqr_2_quat_dot\n\nReferences\n\nStevens, B. L., Lewis, F. L., & Johnson, E. N. (2015). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. Equation (1.4-4) (page 20)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.rate_of_climb_constrain_no_wind-NTuple{4,Any}","page":"API","title":"FlightMechanicsUtils.rate_of_climb_constrain_no_wind","text":"rate_of_climb_constrain_no_wind(γ, α, β, ϕ)\n\nCalculate pitch angle (θ rad) to obtain a flight path angle (γ rad) at certain angle of attack (α rad), angle of sideslip (β rad) and roll (ϕ rad).\n\nInertial velocity and aerodynamic velocity are equivalent in the absence of wind:\n\nv_cg-e^e = R_eb R_bw v_cg-air^w\n\nReferences\n\nStevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. (Section 3.6, equation 3.6-3, page 187)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.rigid_body_acceleration-NTuple{4,Any}","page":"API","title":"FlightMechanicsUtils.rigid_body_acceleration","text":"rigid_body_acceleration(acc_P, ω, ω_dot, r_PQ)\n\nCalcualte rigid body acceleration field.\n\nReturn the acceleration of a point Q of a rigid solid given the acceleration of a point P (accP), the rotational velocity of the solid (ω), the rotational acceleration of the solid (ωdot) and the relative position of Q with respect to P.\n\na_10^Q = a_10^P + omega_10 times (omega_10 times r^PQ) + dotomega_10 times r^PQ\n\nbeing:\n\na_10^Q the acceleration of point Q, fixed to 1, wrt 0\nomega_10 the angular velocity of the solid 1 wrt 0\ndotomega_10 the angular acceleration of the solid 1 wrt 0\nr^PQ the position of Q wrt P (r^Q-r^P)\n\nReferences\n\nStevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. (Section 1.3, Formaula 1.3-14c, page 26)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.rigid_body_velocity-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.rigid_body_velocity","text":"rigid_body_velocity(vel_P, ω, r_PQ)\n\nCalculate rigid solid velocity field.\n\nReturn velocity of a point Q of a rigid solid given the velocity of a point P (vel_P), the rotational velocity of the solid (ω) and the relative position of Q with respect to P.\n\nIf the reference frame 1 is attached to the solid and the velocity is calculated with respect to reference frame 0:\n\nv_10^Q = v_10^P + omega_10 times r^PQ\n\nbeing:\n\nv_10^Q the velocity of point Q, fixed to 1, wrt 0\nomega_10 the angular velocity of the solid 1 wrt 0\nr^PQ the position of Q wrt P (r^Q-r^P)\n\nEvery vector needs to be expressed in the same coordinate system.\n\nReferences\n\nStevens, B. L., Lewis, F. L., (1992). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. (Section 1.3, page 26)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.tasαβ_dot_to_uvw_dot-NTuple{6,Any}","page":"API","title":"FlightMechanicsUtils.tasαβ_dot_to_uvw_dot","text":"tasαβ_dot_to_uvw_dot(tas, α, β, tas_dot, α_dot, β_dot)\n\nObatain body velocity derivatives given velocity in wind axis and its derivatives.\n\nSee also\n\nuvw_dot_to_tasαβ_dot\n\nReferences\n\nMorelli, Eugene A., and Vladislav Klein. Aircraft system identification: Theory and practice. Williamsburg, VA: Sunflyte Enterprises, 2016. Derived from equation 3.32 (page 44).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.uvw_dot_to_tasαβ_dot-NTuple{6,Any}","page":"API","title":"FlightMechanicsUtils.uvw_dot_to_tasαβ_dot","text":"uvw_dot_to_tasαβ_dot(u, v, w, u_dot, v_dot, w_dot)\n\nCalculate time derivatives of velocity expressed as TAS, AOA, AOS.\n\nNotes\n\nNote that tas here is not necessarily true air speed. Could also be inertial speed in the direction of airspeed. It will concide whith TAS for no wind.\n\nSee also\n\ntasαβ_dot_to_uvw_dot\n\nReferences\n\nMorelli, Eugene A., and Vladislav Klein. Aircraft system identification: Theory and practice. Williamsburg, VA: Sunflyte Enterprises, 2016. Equation 3.33 (page 44).\nStevens, B. L., Lewis, F. L., & Johnson, E. N. (2015). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. Equation (2.3-10) (page 81).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.uvw_to_tasαβ-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.uvw_to_tasαβ","text":"uvw_to_tasαβ(u, v, w)\n\nCalculate true air speed (TAS), angle of attack (α) and angle of side slip (β) from velocity expressed in body axis.\n\nNotes\n\nThis function assumes that u, v, w are the body components of the aerodynamic speed. This is not true in genreal (wind speed different from zero), as u, v, w represent velocity with respect to an inertial reference frame.\n\nReferences\n\nStevens, B. L., Lewis, F. L., & Johnson, E. N. (2015). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. Equation (2.3-6b) (page 78).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.ψθϕ_dot_2_pqr-NTuple{5,Any}","page":"API","title":"FlightMechanicsUtils.ψθϕ_dot_2_pqr","text":"ψθϕ_dot_2_pqr(ψ_dot, θ_dot, ϕ_dot, ψ, θ, ϕ)\n\nTransform Euler angles rates (ψdot, θdot, ϕ_dot) [rad/s] to body angular velocity (p, q, r) [rad/s] given the euler angles (θ, ϕ) [rad] using kinematic angular equations.\n\nSee also\n\npqr_2_ψθϕ_dot\n\nReferences\n\nStevens, B. L., Lewis, F. L., & Johnson, E. N. (2015). Aircraft control and simulation: dynamics, controls design, and autonomous systems. John Wiley & Sons. Equation (1.4-3) (page 20)\n\n\n\n\n\n","category":"method"},{"location":"api/#Mechanics","page":"API","title":"Mechanics","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [FlightMechanicsUtils]\nPages   = [\"mechanics.jl\"]\nPrivate = false","category":"page"},{"location":"api/#FlightMechanicsUtils.coordinated_turn_bank","page":"API","title":"FlightMechanicsUtils.coordinated_turn_bank","text":"coordinated_turn_bank(ψ_dot, α, β, tas, γ[, g])\n\nCalculate roll angle (ϕ) [rad] for a given turn rate, angle of attack, angle of sideslip, tas and flight path angle in the absence of wind for a coordinated turn bank.\n\nImposes sum of forces along y body axis equal to zero.\n\nArguments\n\nψ_dot: turn rate (rad/s).\nα: angle of attack (rad).\nβ: angle of sideslip (rad).\ntas: true air speed (m/s).\nγ: flight path angle (rad).\ng: gravity (m/s²). Optional. Default value is gD.\n\n\n\n\n\n","category":"function"},{"location":"api/#FlightMechanicsUtils.steiner_inertia-NTuple{4,Any}","page":"API","title":"FlightMechanicsUtils.steiner_inertia","text":"steiner_inertia(cg, inertia_g, mass, p2)\n\nCalculate the inertia tensor of a rigid solid at point 2 (p2), given the inertia tensor (inertia_g) at the center of gravity (cg) and the mass of the system.\n\nr = p_2 - cg\n\nI_2 = I_cg + m (r^T  r I - r  r^T)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.translate_forces_moments-NTuple{4,Any}","page":"API","title":"FlightMechanicsUtils.translate_forces_moments","text":"translate_forces_moments(forces_1, moments_1, p1, p2)\n\nCalculate equivalent moment at point 2 (p2) given the forces (forces1)  and moments (moments1) at point 1 (p1).\n\nr = p_1 - p_2\n\nM_2 = M_1 + r times F_1\n\n\n\n\n\n","category":"method"},{"location":"api/#Anemometry","page":"API","title":"Anemometry","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Calibrated\nEquivalent\nTrue","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [FlightMechanicsUtils]\nPages   = [\"anemometry.jl\"]\nPrivate = false","category":"page"},{"location":"api/#FlightMechanicsUtils.cas2eas-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.cas2eas","text":"cas2eas(cas, ρ, p)\n\nCalculate equivalent airspeed from calibrated airspeed, density (ρ) and pressure (p) at the current altitude.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.cas2tas-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.cas2tas","text":"cas2tas(cas, ρ, p)\n\nCalculate true airspeed from calibrated airspeed, density (ρ) and pressure (p) at the current altitude.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.compressible_qinf-Tuple{Any,Any}","page":"API","title":"FlightMechanicsUtils.compressible_qinf","text":"compressible_qinf(tas, p, a)\n\nCalculate compressible dynamic pressure from Mach number and static pressure (p)\n\nTwo different models are used depending on the Mach number:\n\nSubsonic case: Bernouilli's equation compressible form.\nSupersonic case: to be implemented.\n\nReferences\n\nWard, D. T. (1993). Introduction to flight test engineering. Elsevier Science Ltd. (page 12)\nFundamentals of Aerdynamics, 5th edition, J.D.Anderson Jr (page 550)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.eas2cas-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.eas2cas","text":"eas2cas(eas, ρ, p)\n\nCalculate calibrated airspeed from equivalent airspeed, density (ρ) and pressure (p) at the current altitude.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.eas2tas-Tuple{Any,Any}","page":"API","title":"FlightMechanicsUtils.eas2tas","text":"eas2tas(qc, ρ)\n\nCalculate true airspeed from equivalent airspeed and density at current altitude (ρ).\n\nReferences\n\nWard, D. T. (1993). Introduction to flight test engineering. Elsevier Science Ltd. (page 13, formula 2.15)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.incompressible_qinf-Tuple{Any,Any}","page":"API","title":"FlightMechanicsUtils.incompressible_qinf","text":"incompressible_qinf(tas, ρ)\n\nCalculate incompressible dynamic pressure from true airspeed (tas) and density (ρ) at current altitude.\n\nReferences\n\nWard, D. T. (1993). Introduction to flight test engineering. Elsevier Science Ltd. (page 13, formula 2.14)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.qc2cas-Tuple{Any}","page":"API","title":"FlightMechanicsUtils.qc2cas","text":"qc2cas(qc)\n\nCalculate calibrated airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure.\n\nqc = p_t - p_s\n\nReferences\n\nWard, D. T. (1993). Introduction to flight test engineering. Elsevier Science Ltd. (page 13, formula 2.13)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.qc2eas-Tuple{Any,Any}","page":"API","title":"FlightMechanicsUtils.qc2eas","text":"qc2eas(qc, p)\n\nCalculate equivalent airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = pt - ps) and p.\n\nReferences\n\nWard, D. T. (1993). Introduction to flight test engineering. Elsevier Science Ltd.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.qc2tas-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.qc2tas","text":"qc2tas(qc, ρ, p)\n\nCalculate true airspeed from ASI (Air Speed indicator), differential pressure between impact pressure and static pressure (qc = pt - ps), rho and p.\n\nReferences\n\nWard, D. T. (1993). Introduction to flight test engineering. Elsevier Science Ltd. (page 12, based on formula 2.11)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.tas2cas-Tuple{Any,Any,Any}","page":"API","title":"FlightMechanicsUtils.tas2cas","text":"tas2cas(cas, ρ, p)\n\nCalculate true airspeed from calibrated airspeed, density (ρ) and pressure (p) at the current altitude.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlightMechanicsUtils.tas2eas-Tuple{Any,Any}","page":"API","title":"FlightMechanicsUtils.tas2eas","text":"tas2eas(tas, ρ)\n\nCalculate equivalent airspeed from true airspeed and density at current altitude (ρ).\n\nReferences\n\nWard, D. T. (1993). Introduction to flight test engineering. Elsevier Science Ltd. (page 13, formula 2.15)\n\n\n\n\n\n","category":"method"},{"location":"#FlightMechanicsUtils.jl","page":"Home","title":"FlightMechanicsUtils.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Flight Mechanics in Julia.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a suite for Flight Mechanics written in Julia. The purpose of this package is to supply efficient and validated Julia implementations of common Flight Mechanics calculations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"At the moment, it covers:","category":"page"},{"location":"","page":"Home","title":"Home","text":"International Standard Atmosphere.\nTransformations between common coordinate systems in Flight Mechanics problems (body, horizon, wind, ECEF) supporting Euler angles and quaternions.\nKinematics & Dynamics:\nRigid solid velocity and acceleration fields.\nAngular kinematic equations.\nSteiner theorem:to determine the moment of inertia of a rigid body about any axis.\nTrimmer constrains for leveled flight, climbs and turns.\nAnemometric functions (tas, cas, eas, dynamic pressure).\nECEF (Earth Centered Earth Fixed) <–-> LLH (Latitude Longitude Height) conversions.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Last release:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add FlightMechanicsUtils","category":"page"},{"location":"","page":"Home","title":"Home","text":"Dev version:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> dev FlightMechanicsUtils","category":"page"},{"location":"","page":"Home","title":"Home","text":"Run tests:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> test FlightMechanicsUtils","category":"page"},{"location":"#What's-new","page":"Home","title":"What's new","text":"","category":"section"},{"location":"#v0.1.2","page":"Home","title":"v0.1.2","text":"","category":"section"},{"location":"#New","page":"Home","title":"New","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ellipsoid type with some common ellipsoids such as WGS84.\nTransformation (ecef2llh) from ECEF (Earth Centered Earth Fixed) to LLH (latitude, longitude, height) and viceversa (llh2ecef) given the reference ellipsoid.\nRotation (horizon2ecef) from local horizon to ECEF axis and vicecersa (ecef2horizon).","category":"page"},{"location":"#Enhancements","page":"Home","title":"Enhancements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"coordinated_turn_bank(ψ_dot, α, β, tas, γ, g) now accepts gravity as optional argument.","category":"page"},{"location":"#v.0.1.1","page":"Home","title":"v.0.1.1","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Initial release.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"api.md\"]","category":"page"}]
}
